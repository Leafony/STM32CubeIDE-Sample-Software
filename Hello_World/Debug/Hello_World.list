
Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a34  08003a34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a3c  08003a3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08003ab4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003ab4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3c9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c1  00000000  00000000  0002b469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022914  00000000  00000000  0002e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afdd  00000000  00000000  0005095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0a08  00000000  00000000  0005b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  0012c394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003960 	.word	0x08003960

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003960 	.word	0x08003960

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <main+0x34>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f002 fcdd 	bl	8002ea4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fa28 	bl	800093e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f811 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f885 	bl	8000600 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f853 	bl	80005a0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World\r\n");
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x38>)
 80004fc:	f002 fcca 	bl	8002e94 <puts>
	  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 fa90 	bl	8000a28 <HAL_Delay>
	  printf("Hello World\r\n");
 8000508:	e7f7      	b.n	80004fa <main+0x22>
 800050a:	bf00      	nop
 800050c:	2000000c 	.word	0x2000000c
 8000510:	08003978 	.word	0x08003978

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fc40 	bl	8002da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053a:	f000 fd07 	bl	8000f4c <HAL_PWREx_ControlVoltageScaling>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000544:	f000 f888 	bl	8000658 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fd49 	bl	8000ff8 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800056c:	f000 f874 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f949 	bl	8001820 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f860 	bl	8000658 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3758      	adds	r7, #88	; 0x58
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <MX_USART2_UART_Init+0x5c>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005e4:	f001 fe9e 	bl	8002324 <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 f833 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	40004400 	.word	0x40004400

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_GPIO_Init+0x2c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <MX_GPIO_Init+0x2c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_GPIO_Init+0x2c>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b29a      	uxth	r2, r3
 8000640:	230a      	movs	r3, #10
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <_write+0x24>)
 8000646:	f001 febb 	bl	80023c0 <HAL_UART_Transmit>
  return len;
 800064a:	687b      	ldr	r3, [r7, #4]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000008c 	.word	0x2000008c

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x44>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x44>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x44>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_MspInit+0x44>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_MspInit+0x44>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6593      	str	r3, [r2, #88]	; 0x58
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_MspInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0a4      	sub	sp, #144	; 0x90
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2268      	movs	r2, #104	; 0x68
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fb6b 	bl	8002da8 <memset>
  if(huart->Instance==USART2)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a21      	ldr	r2, [pc, #132]	; (800075c <HAL_UART_MspInit+0xb0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d13a      	bne.n	8000752 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fabd 	bl	8001c68 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80006f4:	f7ff ffb0 	bl	8000658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_UART_MspInit+0xb4>)
 80006fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <HAL_UART_MspInit+0xb4>)
 80006fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000702:	6593      	str	r3, [r2, #88]	; 0x58
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_UART_MspInit+0xb4>)
 8000706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_UART_MspInit+0xb4>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <HAL_UART_MspInit+0xb4>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <HAL_UART_MspInit+0xb4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000728:	230c      	movs	r3, #12
 800072a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800073e:	2307      	movs	r3, #7
 8000740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000748:	4619      	mov	r1, r3
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f000 fa75 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3790      	adds	r7, #144	; 0x90
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40004400 	.word	0x40004400
 8000760:	40021000 	.word	0x40021000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b0:	f000 f91a 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
  }

  return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081a:	605a      	str	r2, [r3, #4]
  return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f002 fa62 	bl	8002d54 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20028000 	.word	0x20028000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000110 	.word	0x20000110
 80008c4:	20000128 	.word	0x20000128

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000924 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f0:	f7ff ffea 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f002 fa21 	bl	8002d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091e:	f7ff fddb 	bl	80004d8 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000924:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000930:	08003a44 	.word	0x08003a44
  ldr r2, =_sbss
 8000934:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000938:	20000128 	.word	0x20000128

0800093c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>

0800093e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f943 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094e:	200f      	movs	r0, #15
 8000950:	f000 f80e 	bl	8000970 <HAL_InitTick>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	e001      	b.n	8000964 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000960:	f7ff fe80 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000964:	79fb      	ldrb	r3, [r7, #7]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_InitTick+0x70>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f941 	bl	8000c22 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d809      	bhi.n	80009c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f919 	bl	8000bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_InitTick+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e007      	b.n	80009d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e001      	b.n	80009d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000114 	.word	0x20000114

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000114 	.word	0x20000114

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff47 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff5c 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff8e 	bl	8000b28 <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffb0 	bl	8000b90 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	e154      	b.n	8000ef6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2101      	movs	r1, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8146 	beq.w	8000ef0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d005      	beq.n	8000c7c <HAL_GPIO_Init+0x40>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d130      	bne.n	8000cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	091b      	lsrs	r3, r3, #4
 8000cc8:	f003 0201 	and.w	r2, r3, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d017      	beq.n	8000d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d123      	bne.n	8000d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	691a      	ldr	r2, [r3, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	6939      	ldr	r1, [r7, #16]
 8000d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0203 	and.w	r2, r3, #3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 80a0 	beq.w	8000ef0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <HAL_GPIO_Init+0x2d8>)
 8000db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db4:	4a57      	ldr	r2, [pc, #348]	; (8000f14 <HAL_GPIO_Init+0x2d8>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc8:	4a53      	ldr	r2, [pc, #332]	; (8000f18 <HAL_GPIO_Init+0x2dc>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df2:	d019      	beq.n	8000e28 <HAL_GPIO_Init+0x1ec>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d013      	beq.n	8000e24 <HAL_GPIO_Init+0x1e8>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <HAL_GPIO_Init+0x2e4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00d      	beq.n	8000e20 <HAL_GPIO_Init+0x1e4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x1e0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a46      	ldr	r2, [pc, #280]	; (8000f28 <HAL_GPIO_Init+0x2ec>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_GPIO_Init+0x1dc>
 8000e14:	2304      	movs	r3, #4
 8000e16:	e008      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e18:	2307      	movs	r3, #7
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e004      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <HAL_GPIO_Init+0x1ee>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	f002 0203 	and.w	r2, r2, #3
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	4093      	lsls	r3, r2
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3a:	4937      	ldr	r1, [pc, #220]	; (8000f18 <HAL_GPIO_Init+0x2dc>)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e48:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e6c:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f47f aea3 	bne.w	8000c4c <HAL_GPIO_Init+0x10>
  }
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	48000800 	.word	0x48000800
 8000f24:	48000c00 	.word	0x48000c00
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000

08000f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f5a:	d130      	bne.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f68:	d038      	beq.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2232      	movs	r2, #50	; 0x32
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f90:	e002      	b.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa4:	d102      	bne.n	8000fac <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f2      	bne.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb8:	d110      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e00f      	b.n	8000fde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d007      	beq.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 bc02 	b.w	8001810 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100c:	4b96      	ldr	r3, [pc, #600]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80e4 	beq.w	80011f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <HAL_RCC_OscConfig+0x4c>
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	f040 808b 	bne.w	8001152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b01      	cmp	r3, #1
 8001040:	f040 8087 	bne.w	8001152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x64>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e3d9      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4b81      	ldr	r3, [pc, #516]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_RCC_OscConfig+0x7e>
 800106c:	4b7e      	ldr	r3, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001074:	e005      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
 8001076:	4b7c      	ldr	r3, [pc, #496]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001082:	4293      	cmp	r3, r2
 8001084:	d223      	bcs.n	80010ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd8c 	bl	8001ba8 <RCC_SetFlashLatencyFromMSIRange>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e3ba      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109a:	4b73      	ldr	r3, [pc, #460]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a72      	ldr	r2, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b70      	ldr	r3, [pc, #448]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	496d      	ldr	r1, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b8:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	4968      	ldr	r1, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
 80010cc:	e025      	b.n	800111a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4960      	ldr	r1, [pc, #384]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	495b      	ldr	r1, [pc, #364]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fd4c 	bl	8001ba8 <RCC_SetFlashLatencyFromMSIRange>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e37a      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800111a:	f000 fc81 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 800111e:	4602      	mov	r2, r0
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	4950      	ldr	r1, [pc, #320]	; (800126c <HAL_RCC_OscConfig+0x274>)
 800112c:	5ccb      	ldrb	r3, [r1, r3]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_RCC_OscConfig+0x278>)
 8001138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800113a:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <HAL_RCC_OscConfig+0x27c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fc16 	bl	8000970 <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d052      	beq.n	80011f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	e35e      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d032      	beq.n	80011c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a42      	ldr	r2, [pc, #264]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001166:	f7ff fc53 	bl	8000a10 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116e:	f7ff fc4f 	bl	8000a10 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e347      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a35      	ldr	r2, [pc, #212]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4930      	ldr	r1, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	492b      	ldr	r1, [pc, #172]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
 80011be:	e01a      	b.n	80011f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc20 	bl	8000a10 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc1c 	bl	8000a10 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e314      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1dc>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d073      	beq.n	80012ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d005      	beq.n	8001214 <HAL_RCC_OscConfig+0x21c>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d10e      	bne.n	800122c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d063      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d15f      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e2f1      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x24c>
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e025      	b.n	8001290 <HAL_RCC_OscConfig+0x298>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d114      	bne.n	8001278 <HAL_RCC_OscConfig+0x280>
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a02      	ldr	r2, [pc, #8]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e013      	b.n	8001290 <HAL_RCC_OscConfig+0x298>
 8001268:	40021000 	.word	0x40021000
 800126c:	08003988 	.word	0x08003988
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004
 8001278:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a9f      	ldr	r2, [pc, #636]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b9d      	ldr	r3, [pc, #628]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a9c      	ldr	r2, [pc, #624]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fbba 	bl	8000a10 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fbb6 	bl	8000a10 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e2ae      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b2:	4b92      	ldr	r3, [pc, #584]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x2a8>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fba6 	bl	8000a10 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fba2 	bl	8000a10 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e29a      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2d0>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d060      	beq.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_OscConfig+0x310>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d119      	bne.n	8001336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d116      	bne.n	8001336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001308:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x328>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e277      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	4973      	ldr	r1, [pc, #460]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001334:	e040      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d023      	beq.n	8001386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6e      	ldr	r2, [pc, #440]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fb61 	bl	8000a10 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fb5d 	bl	8000a10 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e255      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	495f      	ldr	r1, [pc, #380]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
 8001384:	e018      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a5c      	ldr	r2, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800138c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fb3d 	bl	8000a10 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fb39 	bl	8000a10 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e231      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d03c      	beq.n	800143e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01c      	beq.n	8001406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013cc:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d2:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fb18 	bl	8000a10 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fb14 	bl	8000a10 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e20c      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ef      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3ec>
 8001404:	e01b      	b.n	800143e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140c:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff fafb 	bl	8000a10 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff faf7 	bl	8000a10 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1ef      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ef      	bne.n	800141e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a6 	beq.w	8001598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	6593      	str	r3, [r2, #88]	; 0x58
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001474:	2301      	movs	r3, #1
 8001476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d118      	bne.n	80014b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001490:	f7ff fabe 	bl	8000a10 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001498:	f7ff faba 	bl	8000a10 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1b2      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d108      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4d8>
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ce:	e029      	b.n	8001524 <HAL_RCC_OscConfig+0x52c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d115      	bne.n	8001504 <HAL_RCC_OscConfig+0x50c>
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x52c>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40007000 	.word	0x40007000
 8001504:	4b9a      	ldr	r3, [pc, #616]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	4a99      	ldr	r2, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001514:	4b96      	ldr	r3, [pc, #600]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	4a95      	ldr	r2, [pc, #596]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d016      	beq.n	800155a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fa70 	bl	8000a10 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fa6c 	bl	8000a10 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e162      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ed      	beq.n	8001534 <HAL_RCC_OscConfig+0x53c>
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fa59 	bl	8000a10 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fa55 	bl	8000a10 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e14b      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001578:	4b7d      	ldr	r3, [pc, #500]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ed      	bne.n	8001562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d03c      	beq.n	800161e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015ac:	4b70      	ldr	r3, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b2:	4a6f      	ldr	r2, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fa28 	bl	8000a10 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c4:	f7ff fa24 	bl	8000a10 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e11c      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015d6:	4b66      	ldr	r3, [pc, #408]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x5cc>
 80015e4:	e01b      	b.n	800161e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ec:	4a60      	ldr	r2, [pc, #384]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa0b 	bl	8000a10 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fe:	f7ff fa07 	bl	8000a10 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0ff      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001610:	4b57      	ldr	r3, [pc, #348]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ef      	bne.n	80015fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80f3 	beq.w	800180e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 80c9 	bne.w	80017c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0203 	and.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	429a      	cmp	r2, r3
 8001644:	d12c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	3b01      	subs	r3, #1
 8001652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d123      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d11b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d113      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d109      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d06b      	beq.n	8001778 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d062      	beq.n	800176c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0ac      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016c2:	f7ff f9a5 	bl	8000a10 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff f9a1 	bl	8000a10 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e099      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_RCC_OscConfig+0x77c>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016f8:	3a01      	subs	r2, #1
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001702:	0212      	lsls	r2, r2, #8
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800170a:	0852      	lsrs	r2, r2, #1
 800170c:	3a01      	subs	r2, #1
 800170e:	0552      	lsls	r2, r2, #21
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001716:	0852      	lsrs	r2, r2, #1
 8001718:	3a01      	subs	r2, #1
 800171a:	0652      	lsls	r2, r2, #25
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001722:	06d2      	lsls	r2, r2, #27
 8001724:	430a      	orrs	r2, r1
 8001726:	4912      	ldr	r1, [pc, #72]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001728:	4313      	orrs	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001744:	f7ff f964 	bl	8000a10 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff f960 	bl	8000a10 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e058      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800176a:	e050      	b.n	800180e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e04f      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
 8001770:	40021000 	.word	0x40021000
 8001774:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d144      	bne.n	800180e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a23      	ldr	r2, [pc, #140]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800179a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800179c:	f7ff f938 	bl	8000a10 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f934 	bl	8000a10 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e02c      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x7ac>
 80017c2:	e024      	b.n	800180e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d01f      	beq.n	800180a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff f91b 	bl	8000a10 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff f917 	bl	8000a10 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4905      	ldr	r1, [pc, #20]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_RCC_OscConfig+0x824>)
 8001804:	4013      	ands	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e001      	b.n	800180e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	feeefffc 	.word	0xfeeefffc

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0e7      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d910      	bls.n	8001864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4970      	ldr	r1, [pc, #448]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cf      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d010      	beq.n	8001892 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187c:	429a      	cmp	r2, r3
 800187e:	d908      	bls.n	8001892 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4960      	ldr	r1, [pc, #384]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d04c      	beq.n	8001938 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d121      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0a6      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018be:	4b54      	ldr	r3, [pc, #336]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d115      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e09a      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d6:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e08e      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e086      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4943      	ldr	r1, [pc, #268]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001908:	f7ff f882 	bl	8000a10 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff f87e 	bl	8000a10 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e06e      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d010      	beq.n	8001966 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001950:	429a      	cmp	r2, r3
 8001952:	d208      	bcs.n	8001966 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	492b      	ldr	r1, [pc, #172]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d210      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 0207 	bic.w	r2, r3, #7
 800197c:	4923      	ldr	r1, [pc, #140]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e036      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4918      	ldr	r1, [pc, #96]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4910      	ldr	r1, [pc, #64]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d4:	f000 f824 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	490b      	ldr	r1, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1f4>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1fc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe ffb9 	bl	8000970 <HAL_InitTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a02:	7afb      	ldrb	r3, [r7, #11]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08003988 	.word	0x08003988
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x34>
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d121      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11e      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e005      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e004      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d134      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d003      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0xac>
 8001ac4:	e005      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac8:	617b      	str	r3, [r7, #20]
      break;
 8001aca:	e005      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ace:	617b      	str	r3, [r7, #20]
      break;
 8001ad0:	e002      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	617b      	str	r3, [r7, #20]
      break;
 8001ad6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	fb03 f202 	mul.w	r2, r3, r2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	0e5b      	lsrs	r3, r3, #25
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b18:	69bb      	ldr	r3, [r7, #24]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	080039a0 	.word	0x080039a0
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003998 	.word	0x08003998

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b80:	f7ff ffda 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08003998 	.word	0x08003998

08001ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc0:	f7ff f9b6 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 8001bc4:	6178      	str	r0, [r7, #20]
 8001bc6:	e014      	b.n	8001bf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be0:	f7ff f9a6 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 8001be4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf8:	d10b      	bne.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b80      	cmp	r3, #128	; 0x80
 8001bfe:	d919      	bls.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2ba0      	cmp	r3, #160	; 0xa0
 8001c04:	d902      	bls.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c06:	2302      	movs	r3, #2
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e013      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e010      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d902      	bls.n	8001c1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c18:	2303      	movs	r3, #3
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e00a      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d102      	bne.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c24:	2302      	movs	r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e004      	b.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b70      	cmp	r3, #112	; 0x70
 8001c2e:	d101      	bne.n	8001c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 0207 	bic.w	r2, r3, #7
 8001c3c:	4909      	ldr	r1, [pc, #36]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40022000 	.word	0x40022000

08001c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c70:	2300      	movs	r3, #0
 8001c72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c74:	2300      	movs	r3, #0
 8001c76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d031      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001c8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c92:	d814      	bhi.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c9c:	d10f      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001caa:	e00c      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fa44 	bl	8002140 <RCCEx_PLLSAI1_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cbc:	e003      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	494e      	ldr	r1, [pc, #312]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ce2:	e001      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 809e 	beq.w	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cfa:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00d      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a3f      	ldr	r2, [pc, #252]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d38:	f7fe fe6a 	bl	8000a10 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d3e:	e009      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7fe fe66 	bl	8000a10 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d902      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	74fb      	strb	r3, [r7, #19]
        break;
 8001d52:	e005      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ef      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d15a      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01e      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d019      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d016      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fe26 	bl	8000a10 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fe22 	bl	8000a10 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d902      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	74fb      	strb	r3, [r7, #19]
            break;
 8001dde:	e006      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ec      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e02:	4904      	ldr	r1, [pc, #16]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e0a:	e009      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	74bb      	strb	r3, [r7, #18]
 8001e10:	e006      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e20:	7c7b      	ldrb	r3, [r7, #17]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b9e      	ldr	r3, [pc, #632]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a9d      	ldr	r2, [pc, #628]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e3e:	4b98      	ldr	r3, [pc, #608]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f023 0203 	bic.w	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4994      	ldr	r1, [pc, #592]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e60:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f023 020c 	bic.w	r2, r3, #12
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	498c      	ldr	r1, [pc, #560]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e82:	4b87      	ldr	r3, [pc, #540]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	4983      	ldr	r1, [pc, #524]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ea4:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	497b      	ldr	r1, [pc, #492]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ecc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4972      	ldr	r1, [pc, #456]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ee8:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	496a      	ldr	r1, [pc, #424]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f0a:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f18:	4961      	ldr	r1, [pc, #388]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f2c:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	4959      	ldr	r1, [pc, #356]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	4950      	ldr	r1, [pc, #320]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f70:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	4948      	ldr	r1, [pc, #288]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f98:	f023 0203 	bic.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	493f      	ldr	r1, [pc, #252]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d028      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc2:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fde:	60d3      	str	r3, [r2, #12]
 8001fe0:	e011      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fea:	d10c      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f8a4 	bl	8002140 <RCCEx_PLLSAI1_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d028      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002018:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	491f      	ldr	r1, [pc, #124]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002030:	d106      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203c:	60d3      	str	r3, [r2, #12]
 800203e:	e011      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002048:	d10c      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	2101      	movs	r1, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f875 	bl	8002140 <RCCEx_PLLSAI1_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02b      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800208e:	d109      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a02      	ldr	r2, [pc, #8]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209a:	60d3      	str	r3, [r2, #12]
 800209c:	e014      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2101      	movs	r1, #1
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f843 	bl	8002140 <RCCEx_PLLSAI1_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01c      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f2:	d10c      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	2102      	movs	r1, #2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f820 	bl	8002140 <RCCEx_PLLSAI1_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	4904      	ldr	r1, [pc, #16]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002130:	7cbb      	ldrb	r3, [r7, #18]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000

08002140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800214e:	4b74      	ldr	r3, [pc, #464]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d018      	beq.n	800218c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800215a:	4b71      	ldr	r3, [pc, #452]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0203 	and.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d10d      	bne.n	8002186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
       ||
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002172:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
       ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d047      	beq.n	8002216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e044      	b.n	8002216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d018      	beq.n	80021c6 <RCCEx_PLLSAI1_Config+0x86>
 8002194:	2b03      	cmp	r3, #3
 8002196:	d825      	bhi.n	80021e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002198:	2b01      	cmp	r3, #1
 800219a:	d002      	beq.n	80021a2 <RCCEx_PLLSAI1_Config+0x62>
 800219c:	2b02      	cmp	r3, #2
 800219e:	d009      	beq.n	80021b4 <RCCEx_PLLSAI1_Config+0x74>
 80021a0:	e020      	b.n	80021e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021a2:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11d      	bne.n	80021ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b2:	e01a      	b.n	80021ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021b4:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c4:	e013      	b.n	80021ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021d2:	4b53      	ldr	r3, [pc, #332]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021e2:	e006      	b.n	80021f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      break;
 80021e8:	e004      	b.n	80021f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021ea:	bf00      	nop
 80021ec:	e002      	b.n	80021f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80021f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	430b      	orrs	r3, r1
 8002210:	4943      	ldr	r1, [pc, #268]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002212:	4313      	orrs	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d17c      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002228:	f7fe fbf2 	bl	8000a10 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800222e:	e009      	b.n	8002244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002230:	f7fe fbee 	bl	8000a10 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	73fb      	strb	r3, [r7, #15]
        break;
 8002242:	e005      	b.n	8002250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ef      	bne.n	8002230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d15f      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d110      	bne.n	800227e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6892      	ldr	r2, [r2, #8]
 800226c:	0211      	lsls	r1, r2, #8
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	06d2      	lsls	r2, r2, #27
 8002274:	430a      	orrs	r2, r1
 8002276:	492a      	ldr	r1, [pc, #168]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002278:	4313      	orrs	r3, r2
 800227a:	610b      	str	r3, [r1, #16]
 800227c:	e027      	b.n	80022ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d112      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800228c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6892      	ldr	r2, [r2, #8]
 8002294:	0211      	lsls	r1, r2, #8
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6912      	ldr	r2, [r2, #16]
 800229a:	0852      	lsrs	r2, r2, #1
 800229c:	3a01      	subs	r2, #1
 800229e:	0552      	lsls	r2, r2, #21
 80022a0:	430a      	orrs	r2, r1
 80022a2:	491f      	ldr	r1, [pc, #124]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	610b      	str	r3, [r1, #16]
 80022a8:	e011      	b.n	80022ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6892      	ldr	r2, [r2, #8]
 80022ba:	0211      	lsls	r1, r2, #8
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6952      	ldr	r2, [r2, #20]
 80022c0:	0852      	lsrs	r2, r2, #1
 80022c2:	3a01      	subs	r2, #1
 80022c4:	0652      	lsls	r2, r2, #25
 80022c6:	430a      	orrs	r2, r1
 80022c8:	4915      	ldr	r1, [pc, #84]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe fb99 	bl	8000a10 <HAL_GetTick>
 80022de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022e0:	e009      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022e2:	f7fe fb95 	bl	8000a10 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d902      	bls.n	80022f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	73fb      	strb	r3, [r7, #15]
          break;
 80022f4:	e005      	b.n	8002302 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ef      	beq.n	80022e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e040      	b.n	80023b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe f9b0 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8c0 	bl	80024e8 <UART_SetConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e022      	b.n	80023b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fb3a 	bl	80029f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800239e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fbc1 	bl	8002b38 <UART_CheckIdleState>
 80023b6:	4603      	mov	r3, r0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	f040 8082 	bne.w	80024de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_UART_Transmit+0x26>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07a      	b.n	80024e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_UART_Transmit+0x38>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e073      	b.n	80024e0 <HAL_UART_Transmit+0x120>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800240e:	f7fe faff 	bl	8000a10 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242c:	d108      	bne.n	8002440 <HAL_UART_Transmit+0x80>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e003      	b.n	8002448 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002450:	e02d      	b.n	80024ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fbb4 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e039      	b.n	80024e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	881a      	ldrh	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247e:	b292      	uxth	r2, r2
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3302      	adds	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e008      	b.n	800249c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b292      	uxth	r2, r2
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1cb      	bne.n	8002452 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fb80 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e005      	b.n	80024e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b08a      	sub	sp, #40	; 0x28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4313      	orrs	r3, r2
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4ba5      	ldr	r3, [pc, #660]	; (80027ac <UART_SetConfig+0x2c4>)
 8002518:	4013      	ands	r3, r2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a9a      	ldr	r2, [pc, #616]	; (80027b0 <UART_SetConfig+0x2c8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	4313      	orrs	r3, r2
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a91      	ldr	r2, [pc, #580]	; (80027b4 <UART_SetConfig+0x2cc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d126      	bne.n	80025c0 <UART_SetConfig+0xd8>
 8002572:	4b91      	ldr	r3, [pc, #580]	; (80027b8 <UART_SetConfig+0x2d0>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d81b      	bhi.n	80025b8 <UART_SetConfig+0xd0>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <UART_SetConfig+0xa0>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	08002599 	.word	0x08002599
 800258c:	080025a9 	.word	0x080025a9
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025b1 	.word	0x080025b1
 8002598:	2301      	movs	r3, #1
 800259a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800259e:	e0d6      	b.n	800274e <UART_SetConfig+0x266>
 80025a0:	2302      	movs	r3, #2
 80025a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025a6:	e0d2      	b.n	800274e <UART_SetConfig+0x266>
 80025a8:	2304      	movs	r3, #4
 80025aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025ae:	e0ce      	b.n	800274e <UART_SetConfig+0x266>
 80025b0:	2308      	movs	r3, #8
 80025b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025b6:	e0ca      	b.n	800274e <UART_SetConfig+0x266>
 80025b8:	2310      	movs	r3, #16
 80025ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025be:	e0c6      	b.n	800274e <UART_SetConfig+0x266>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7d      	ldr	r2, [pc, #500]	; (80027bc <UART_SetConfig+0x2d4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d138      	bne.n	800263c <UART_SetConfig+0x154>
 80025ca:	4b7b      	ldr	r3, [pc, #492]	; (80027b8 <UART_SetConfig+0x2d0>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d82d      	bhi.n	8002634 <UART_SetConfig+0x14c>
 80025d8:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <UART_SetConfig+0xf8>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	08002615 	.word	0x08002615
 80025e4:	08002635 	.word	0x08002635
 80025e8:	08002635 	.word	0x08002635
 80025ec:	08002635 	.word	0x08002635
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002635 	.word	0x08002635
 80025f8:	08002635 	.word	0x08002635
 80025fc:	08002635 	.word	0x08002635
 8002600:	0800261d 	.word	0x0800261d
 8002604:	08002635 	.word	0x08002635
 8002608:	08002635 	.word	0x08002635
 800260c:	08002635 	.word	0x08002635
 8002610:	0800262d 	.word	0x0800262d
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800261a:	e098      	b.n	800274e <UART_SetConfig+0x266>
 800261c:	2302      	movs	r3, #2
 800261e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002622:	e094      	b.n	800274e <UART_SetConfig+0x266>
 8002624:	2304      	movs	r3, #4
 8002626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800262a:	e090      	b.n	800274e <UART_SetConfig+0x266>
 800262c:	2308      	movs	r3, #8
 800262e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002632:	e08c      	b.n	800274e <UART_SetConfig+0x266>
 8002634:	2310      	movs	r3, #16
 8002636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800263a:	e088      	b.n	800274e <UART_SetConfig+0x266>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a5f      	ldr	r2, [pc, #380]	; (80027c0 <UART_SetConfig+0x2d8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d125      	bne.n	8002692 <UART_SetConfig+0x1aa>
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <UART_SetConfig+0x2d0>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d016      	beq.n	8002682 <UART_SetConfig+0x19a>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d818      	bhi.n	800268a <UART_SetConfig+0x1a2>
 8002658:	2b20      	cmp	r3, #32
 800265a:	d00a      	beq.n	8002672 <UART_SetConfig+0x18a>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d814      	bhi.n	800268a <UART_SetConfig+0x1a2>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <UART_SetConfig+0x182>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d008      	beq.n	800267a <UART_SetConfig+0x192>
 8002668:	e00f      	b.n	800268a <UART_SetConfig+0x1a2>
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002670:	e06d      	b.n	800274e <UART_SetConfig+0x266>
 8002672:	2302      	movs	r3, #2
 8002674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002678:	e069      	b.n	800274e <UART_SetConfig+0x266>
 800267a:	2304      	movs	r3, #4
 800267c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002680:	e065      	b.n	800274e <UART_SetConfig+0x266>
 8002682:	2308      	movs	r3, #8
 8002684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002688:	e061      	b.n	800274e <UART_SetConfig+0x266>
 800268a:	2310      	movs	r3, #16
 800268c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002690:	e05d      	b.n	800274e <UART_SetConfig+0x266>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <UART_SetConfig+0x2dc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d125      	bne.n	80026e8 <UART_SetConfig+0x200>
 800269c:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <UART_SetConfig+0x2d0>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026a6:	2bc0      	cmp	r3, #192	; 0xc0
 80026a8:	d016      	beq.n	80026d8 <UART_SetConfig+0x1f0>
 80026aa:	2bc0      	cmp	r3, #192	; 0xc0
 80026ac:	d818      	bhi.n	80026e0 <UART_SetConfig+0x1f8>
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d00a      	beq.n	80026c8 <UART_SetConfig+0x1e0>
 80026b2:	2b80      	cmp	r3, #128	; 0x80
 80026b4:	d814      	bhi.n	80026e0 <UART_SetConfig+0x1f8>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <UART_SetConfig+0x1d8>
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d008      	beq.n	80026d0 <UART_SetConfig+0x1e8>
 80026be:	e00f      	b.n	80026e0 <UART_SetConfig+0x1f8>
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026c6:	e042      	b.n	800274e <UART_SetConfig+0x266>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ce:	e03e      	b.n	800274e <UART_SetConfig+0x266>
 80026d0:	2304      	movs	r3, #4
 80026d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026d6:	e03a      	b.n	800274e <UART_SetConfig+0x266>
 80026d8:	2308      	movs	r3, #8
 80026da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026de:	e036      	b.n	800274e <UART_SetConfig+0x266>
 80026e0:	2310      	movs	r3, #16
 80026e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026e6:	e032      	b.n	800274e <UART_SetConfig+0x266>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a30      	ldr	r2, [pc, #192]	; (80027b0 <UART_SetConfig+0x2c8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d12a      	bne.n	8002748 <UART_SetConfig+0x260>
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <UART_SetConfig+0x2d0>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002700:	d01a      	beq.n	8002738 <UART_SetConfig+0x250>
 8002702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002706:	d81b      	bhi.n	8002740 <UART_SetConfig+0x258>
 8002708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800270c:	d00c      	beq.n	8002728 <UART_SetConfig+0x240>
 800270e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002712:	d815      	bhi.n	8002740 <UART_SetConfig+0x258>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <UART_SetConfig+0x238>
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d008      	beq.n	8002730 <UART_SetConfig+0x248>
 800271e:	e00f      	b.n	8002740 <UART_SetConfig+0x258>
 8002720:	2300      	movs	r3, #0
 8002722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002726:	e012      	b.n	800274e <UART_SetConfig+0x266>
 8002728:	2302      	movs	r3, #2
 800272a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800272e:	e00e      	b.n	800274e <UART_SetConfig+0x266>
 8002730:	2304      	movs	r3, #4
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002736:	e00a      	b.n	800274e <UART_SetConfig+0x266>
 8002738:	2308      	movs	r3, #8
 800273a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800273e:	e006      	b.n	800274e <UART_SetConfig+0x266>
 8002740:	2310      	movs	r3, #16
 8002742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002746:	e002      	b.n	800274e <UART_SetConfig+0x266>
 8002748:	2310      	movs	r3, #16
 800274a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <UART_SetConfig+0x2c8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	f040 808b 	bne.w	8002870 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800275a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800275e:	2b08      	cmp	r3, #8
 8002760:	d834      	bhi.n	80027cc <UART_SetConfig+0x2e4>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <UART_SetConfig+0x280>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	0800278d 	.word	0x0800278d
 800276c:	080027cd 	.word	0x080027cd
 8002770:	08002795 	.word	0x08002795
 8002774:	080027cd 	.word	0x080027cd
 8002778:	0800279b 	.word	0x0800279b
 800277c:	080027cd 	.word	0x080027cd
 8002780:	080027cd 	.word	0x080027cd
 8002784:	080027cd 	.word	0x080027cd
 8002788:	080027a3 	.word	0x080027a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800278c:	f7ff f9e0 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002790:	61f8      	str	r0, [r7, #28]
        break;
 8002792:	e021      	b.n	80027d8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <UART_SetConfig+0x2e0>)
 8002796:	61fb      	str	r3, [r7, #28]
        break;
 8002798:	e01e      	b.n	80027d8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800279a:	f7ff f941 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 800279e:	61f8      	str	r0, [r7, #28]
        break;
 80027a0:	e01a      	b.n	80027d8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a6:	61fb      	str	r3, [r7, #28]
        break;
 80027a8:	e016      	b.n	80027d8 <UART_SetConfig+0x2f0>
 80027aa:	bf00      	nop
 80027ac:	efff69f3 	.word	0xefff69f3
 80027b0:	40008000 	.word	0x40008000
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40004400 	.word	0x40004400
 80027c0:	40004800 	.word	0x40004800
 80027c4:	40004c00 	.word	0x40004c00
 80027c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80027d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80fa 	beq.w	80029d4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d305      	bcc.n	80027fc <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d903      	bls.n	8002804 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002802:	e0e7      	b.n	80029d4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2200      	movs	r2, #0
 8002808:	461c      	mov	r4, r3
 800280a:	4615      	mov	r5, r2
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	022b      	lsls	r3, r5, #8
 8002816:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800281a:	0222      	lsls	r2, r4, #8
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	6849      	ldr	r1, [r1, #4]
 8002820:	0849      	lsrs	r1, r1, #1
 8002822:	2000      	movs	r0, #0
 8002824:	4688      	mov	r8, r1
 8002826:	4681      	mov	r9, r0
 8002828:	eb12 0a08 	adds.w	sl, r2, r8
 800282c:	eb43 0b09 	adc.w	fp, r3, r9
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800283e:	4650      	mov	r0, sl
 8002840:	4659      	mov	r1, fp
 8002842:	f7fd fcc7 	bl	80001d4 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4613      	mov	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002854:	d308      	bcc.n	8002868 <UART_SetConfig+0x380>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800285c:	d204      	bcs.n	8002868 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	e0b5      	b.n	80029d4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800286e:	e0b1      	b.n	80029d4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002878:	d15d      	bne.n	8002936 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800287a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800287e:	2b08      	cmp	r3, #8
 8002880:	d827      	bhi.n	80028d2 <UART_SetConfig+0x3ea>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <UART_SetConfig+0x3a0>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028ad 	.word	0x080028ad
 800288c:	080028b5 	.word	0x080028b5
 8002890:	080028bd 	.word	0x080028bd
 8002894:	080028d3 	.word	0x080028d3
 8002898:	080028c3 	.word	0x080028c3
 800289c:	080028d3 	.word	0x080028d3
 80028a0:	080028d3 	.word	0x080028d3
 80028a4:	080028d3 	.word	0x080028d3
 80028a8:	080028cb 	.word	0x080028cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ac:	f7ff f950 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 80028b0:	61f8      	str	r0, [r7, #28]
        break;
 80028b2:	e014      	b.n	80028de <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028b4:	f7ff f962 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 80028b8:	61f8      	str	r0, [r7, #28]
        break;
 80028ba:	e010      	b.n	80028de <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <UART_SetConfig+0x508>)
 80028be:	61fb      	str	r3, [r7, #28]
        break;
 80028c0:	e00d      	b.n	80028de <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c2:	f7ff f8ad 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80028c6:	61f8      	str	r0, [r7, #28]
        break;
 80028c8:	e009      	b.n	80028de <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ce:	61fb      	str	r3, [r7, #28]
        break;
 80028d0:	e005      	b.n	80028de <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d077      	beq.n	80029d4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005a      	lsls	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	441a      	add	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d916      	bls.n	800292e <UART_SetConfig+0x446>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002906:	d212      	bcs.n	800292e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f023 030f 	bic.w	r3, r3, #15
 8002910:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	b29a      	uxth	r2, r3
 800291e:	8afb      	ldrh	r3, [r7, #22]
 8002920:	4313      	orrs	r3, r2
 8002922:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	8afa      	ldrh	r2, [r7, #22]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	e052      	b.n	80029d4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002934:	e04e      	b.n	80029d4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800293a:	2b08      	cmp	r3, #8
 800293c:	d827      	bhi.n	800298e <UART_SetConfig+0x4a6>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <UART_SetConfig+0x45c>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002969 	.word	0x08002969
 8002948:	08002971 	.word	0x08002971
 800294c:	08002979 	.word	0x08002979
 8002950:	0800298f 	.word	0x0800298f
 8002954:	0800297f 	.word	0x0800297f
 8002958:	0800298f 	.word	0x0800298f
 800295c:	0800298f 	.word	0x0800298f
 8002960:	0800298f 	.word	0x0800298f
 8002964:	08002987 	.word	0x08002987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002968:	f7ff f8f2 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 800296c:	61f8      	str	r0, [r7, #28]
        break;
 800296e:	e014      	b.n	800299a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff f904 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8002974:	61f8      	str	r0, [r7, #28]
        break;
 8002976:	e010      	b.n	800299a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <UART_SetConfig+0x508>)
 800297a:	61fb      	str	r3, [r7, #28]
        break;
 800297c:	e00d      	b.n	800299a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800297e:	f7ff f84f 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8002982:	61f8      	str	r0, [r7, #28]
        break;
 8002984:	e009      	b.n	800299a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	61fb      	str	r3, [r7, #28]
        break;
 800298c:	e005      	b.n	800299a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002998:	bf00      	nop
    }

    if (pclk != 0U)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d019      	beq.n	80029d4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	085a      	lsrs	r2, r3, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	441a      	add	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d909      	bls.n	80029ce <UART_SetConfig+0x4e6>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d205      	bcs.n	80029ce <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60da      	str	r2, [r3, #12]
 80029cc:	e002      	b.n	80029d4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80029e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ee:	bf00      	nop
 80029f0:	00f42400 	.word	0x00f42400

080029f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01a      	beq.n	8002b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d10a      	bne.n	8002b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b48:	f7fd ff62 	bl	8000a10 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d10e      	bne.n	8002b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f82d 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e023      	b.n	8002bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d10e      	bne.n	8002ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f817 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e00d      	b.n	8002bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b09c      	sub	sp, #112	; 0x70
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	e0a5      	b.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	f000 80a1 	beq.w	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fd ff13 	bl	8000a10 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x32>
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d13e      	bne.n	8002c7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e6      	bne.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3308      	adds	r3, #8
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	663b      	str	r3, [r7, #96]	; 0x60
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e5      	bne.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e067      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d04f      	beq.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c96:	d147      	bne.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e6      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3308      	adds	r3, #8
 8002cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cf4:	623a      	str	r2, [r7, #32]
 8002cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	69f9      	ldr	r1, [r7, #28]
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e5      	bne.n	8002cd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e010      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	f43f af4a 	beq.w	8002bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3770      	adds	r7, #112	; 0x70
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <__errno>:
 8002d54:	4b01      	ldr	r3, [pc, #4]	; (8002d5c <__errno+0x8>)
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	2000000c 	.word	0x2000000c

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	4d0d      	ldr	r5, [pc, #52]	; (8002d98 <__libc_init_array+0x38>)
 8002d64:	4c0d      	ldr	r4, [pc, #52]	; (8002d9c <__libc_init_array+0x3c>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	4d0b      	ldr	r5, [pc, #44]	; (8002da0 <__libc_init_array+0x40>)
 8002d72:	4c0c      	ldr	r4, [pc, #48]	; (8002da4 <__libc_init_array+0x44>)
 8002d74:	f000 fdf4 	bl	8003960 <_init>
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08003a3c 	.word	0x08003a3c
 8002d9c:	08003a3c 	.word	0x08003a3c
 8002da0:	08003a3c 	.word	0x08003a3c
 8002da4:	08003a40 	.word	0x08003a40

08002da8 <memset>:
 8002da8:	4402      	add	r2, r0
 8002daa:	4603      	mov	r3, r0
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d100      	bne.n	8002db2 <memset+0xa>
 8002db0:	4770      	bx	lr
 8002db2:	f803 1b01 	strb.w	r1, [r3], #1
 8002db6:	e7f9      	b.n	8002dac <memset+0x4>

08002db8 <_puts_r>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	460e      	mov	r6, r1
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	b118      	cbz	r0, 8002dc8 <_puts_r+0x10>
 8002dc0:	6983      	ldr	r3, [r0, #24]
 8002dc2:	b90b      	cbnz	r3, 8002dc8 <_puts_r+0x10>
 8002dc4:	f000 fb16 	bl	80033f4 <__sinit>
 8002dc8:	69ab      	ldr	r3, [r5, #24]
 8002dca:	68ac      	ldr	r4, [r5, #8]
 8002dcc:	b913      	cbnz	r3, 8002dd4 <_puts_r+0x1c>
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fb10 	bl	80033f4 <__sinit>
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <_puts_r+0xd0>)
 8002dd6:	429c      	cmp	r4, r3
 8002dd8:	d120      	bne.n	8002e1c <_puts_r+0x64>
 8002dda:	686c      	ldr	r4, [r5, #4]
 8002ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dde:	07db      	lsls	r3, r3, #31
 8002de0:	d405      	bmi.n	8002dee <_puts_r+0x36>
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	0598      	lsls	r0, r3, #22
 8002de6:	d402      	bmi.n	8002dee <_puts_r+0x36>
 8002de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dea:	f000 fba1 	bl	8003530 <__retarget_lock_acquire_recursive>
 8002dee:	89a3      	ldrh	r3, [r4, #12]
 8002df0:	0719      	lsls	r1, r3, #28
 8002df2:	d51d      	bpl.n	8002e30 <_puts_r+0x78>
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	b1db      	cbz	r3, 8002e30 <_puts_r+0x78>
 8002df8:	3e01      	subs	r6, #1
 8002dfa:	68a3      	ldr	r3, [r4, #8]
 8002dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e00:	3b01      	subs	r3, #1
 8002e02:	60a3      	str	r3, [r4, #8]
 8002e04:	bb39      	cbnz	r1, 8002e56 <_puts_r+0x9e>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da38      	bge.n	8002e7c <_puts_r+0xc4>
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	210a      	movs	r1, #10
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 f916 	bl	8003040 <__swbuf_r>
 8002e14:	3001      	adds	r0, #1
 8002e16:	d011      	beq.n	8002e3c <_puts_r+0x84>
 8002e18:	250a      	movs	r5, #10
 8002e1a:	e011      	b.n	8002e40 <_puts_r+0x88>
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <_puts_r+0xd4>)
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d101      	bne.n	8002e26 <_puts_r+0x6e>
 8002e22:	68ac      	ldr	r4, [r5, #8]
 8002e24:	e7da      	b.n	8002ddc <_puts_r+0x24>
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <_puts_r+0xd8>)
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	bf08      	it	eq
 8002e2c:	68ec      	ldreq	r4, [r5, #12]
 8002e2e:	e7d5      	b.n	8002ddc <_puts_r+0x24>
 8002e30:	4621      	mov	r1, r4
 8002e32:	4628      	mov	r0, r5
 8002e34:	f000 f956 	bl	80030e4 <__swsetup_r>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d0dd      	beq.n	8002df8 <_puts_r+0x40>
 8002e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8002e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e42:	07da      	lsls	r2, r3, #31
 8002e44:	d405      	bmi.n	8002e52 <_puts_r+0x9a>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	059b      	lsls	r3, r3, #22
 8002e4a:	d402      	bmi.n	8002e52 <_puts_r+0x9a>
 8002e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e4e:	f000 fb70 	bl	8003532 <__retarget_lock_release_recursive>
 8002e52:	4628      	mov	r0, r5
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	da04      	bge.n	8002e64 <_puts_r+0xac>
 8002e5a:	69a2      	ldr	r2, [r4, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dc06      	bgt.n	8002e6e <_puts_r+0xb6>
 8002e60:	290a      	cmp	r1, #10
 8002e62:	d004      	beq.n	8002e6e <_puts_r+0xb6>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	6022      	str	r2, [r4, #0]
 8002e6a:	7019      	strb	r1, [r3, #0]
 8002e6c:	e7c5      	b.n	8002dfa <_puts_r+0x42>
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	f000 f8e5 	bl	8003040 <__swbuf_r>
 8002e76:	3001      	adds	r0, #1
 8002e78:	d1bf      	bne.n	8002dfa <_puts_r+0x42>
 8002e7a:	e7df      	b.n	8002e3c <_puts_r+0x84>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	250a      	movs	r5, #10
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	6022      	str	r2, [r4, #0]
 8002e84:	701d      	strb	r5, [r3, #0]
 8002e86:	e7db      	b.n	8002e40 <_puts_r+0x88>
 8002e88:	080039f4 	.word	0x080039f4
 8002e8c:	08003a14 	.word	0x08003a14
 8002e90:	080039d4 	.word	0x080039d4

08002e94 <puts>:
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <puts+0xc>)
 8002e96:	4601      	mov	r1, r0
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	f7ff bf8d 	b.w	8002db8 <_puts_r>
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <setbuf>:
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eaa:	bf0c      	ite	eq
 8002eac:	2202      	moveq	r2, #2
 8002eae:	2200      	movne	r2, #0
 8002eb0:	f000 b800 	b.w	8002eb4 <setvbuf>

08002eb4 <setvbuf>:
 8002eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002eb8:	461d      	mov	r5, r3
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <setvbuf+0x17c>)
 8002ebc:	681f      	ldr	r7, [r3, #0]
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	460e      	mov	r6, r1
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	b127      	cbz	r7, 8002ed0 <setvbuf+0x1c>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	b913      	cbnz	r3, 8002ed0 <setvbuf+0x1c>
 8002eca:	4638      	mov	r0, r7
 8002ecc:	f000 fa92 	bl	80033f4 <__sinit>
 8002ed0:	4b58      	ldr	r3, [pc, #352]	; (8003034 <setvbuf+0x180>)
 8002ed2:	429c      	cmp	r4, r3
 8002ed4:	d167      	bne.n	8002fa6 <setvbuf+0xf2>
 8002ed6:	687c      	ldr	r4, [r7, #4]
 8002ed8:	f1b8 0f02 	cmp.w	r8, #2
 8002edc:	d006      	beq.n	8002eec <setvbuf+0x38>
 8002ede:	f1b8 0f01 	cmp.w	r8, #1
 8002ee2:	f200 809f 	bhi.w	8003024 <setvbuf+0x170>
 8002ee6:	2d00      	cmp	r5, #0
 8002ee8:	f2c0 809c 	blt.w	8003024 <setvbuf+0x170>
 8002eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eee:	07db      	lsls	r3, r3, #31
 8002ef0:	d405      	bmi.n	8002efe <setvbuf+0x4a>
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	0598      	lsls	r0, r3, #22
 8002ef6:	d402      	bmi.n	8002efe <setvbuf+0x4a>
 8002ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002efa:	f000 fb19 	bl	8003530 <__retarget_lock_acquire_recursive>
 8002efe:	4621      	mov	r1, r4
 8002f00:	4638      	mov	r0, r7
 8002f02:	f000 f9e3 	bl	80032cc <_fflush_r>
 8002f06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f08:	b141      	cbz	r1, 8002f1c <setvbuf+0x68>
 8002f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f0e:	4299      	cmp	r1, r3
 8002f10:	d002      	beq.n	8002f18 <setvbuf+0x64>
 8002f12:	4638      	mov	r0, r7
 8002f14:	f000 fb7c 	bl	8003610 <_free_r>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61a3      	str	r3, [r4, #24]
 8002f20:	6063      	str	r3, [r4, #4]
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	0619      	lsls	r1, r3, #24
 8002f26:	d503      	bpl.n	8002f30 <setvbuf+0x7c>
 8002f28:	6921      	ldr	r1, [r4, #16]
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	f000 fb70 	bl	8003610 <_free_r>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f1b8 0f02 	cmp.w	r8, #2
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	d06c      	beq.n	800301c <setvbuf+0x168>
 8002f42:	ab01      	add	r3, sp, #4
 8002f44:	466a      	mov	r2, sp
 8002f46:	4621      	mov	r1, r4
 8002f48:	4638      	mov	r0, r7
 8002f4a:	f000 faf3 	bl	8003534 <__swhatbuf_r>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	4318      	orrs	r0, r3
 8002f52:	81a0      	strh	r0, [r4, #12]
 8002f54:	2d00      	cmp	r5, #0
 8002f56:	d130      	bne.n	8002fba <setvbuf+0x106>
 8002f58:	9d00      	ldr	r5, [sp, #0]
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f000 fb50 	bl	8003600 <malloc>
 8002f60:	4606      	mov	r6, r0
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d155      	bne.n	8003012 <setvbuf+0x15e>
 8002f66:	f8dd 9000 	ldr.w	r9, [sp]
 8002f6a:	45a9      	cmp	r9, r5
 8002f6c:	d14a      	bne.n	8003004 <setvbuf+0x150>
 8002f6e:	f04f 35ff 	mov.w	r5, #4294967295
 8002f72:	2200      	movs	r2, #0
 8002f74:	60a2      	str	r2, [r4, #8]
 8002f76:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002f7a:	6022      	str	r2, [r4, #0]
 8002f7c:	6122      	str	r2, [r4, #16]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f84:	6162      	str	r2, [r4, #20]
 8002f86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	07d2      	lsls	r2, r2, #31
 8002f8e:	81a3      	strh	r3, [r4, #12]
 8002f90:	d405      	bmi.n	8002f9e <setvbuf+0xea>
 8002f92:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f96:	d102      	bne.n	8002f9e <setvbuf+0xea>
 8002f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f9a:	f000 faca 	bl	8003532 <__retarget_lock_release_recursive>
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	b003      	add	sp, #12
 8002fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <setvbuf+0x184>)
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	d101      	bne.n	8002fb0 <setvbuf+0xfc>
 8002fac:	68bc      	ldr	r4, [r7, #8]
 8002fae:	e793      	b.n	8002ed8 <setvbuf+0x24>
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <setvbuf+0x188>)
 8002fb2:	429c      	cmp	r4, r3
 8002fb4:	bf08      	it	eq
 8002fb6:	68fc      	ldreq	r4, [r7, #12]
 8002fb8:	e78e      	b.n	8002ed8 <setvbuf+0x24>
 8002fba:	2e00      	cmp	r6, #0
 8002fbc:	d0cd      	beq.n	8002f5a <setvbuf+0xa6>
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	b913      	cbnz	r3, 8002fc8 <setvbuf+0x114>
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f000 fa16 	bl	80033f4 <__sinit>
 8002fc8:	f1b8 0f01 	cmp.w	r8, #1
 8002fcc:	bf08      	it	eq
 8002fce:	89a3      	ldrheq	r3, [r4, #12]
 8002fd0:	6026      	str	r6, [r4, #0]
 8002fd2:	bf04      	itt	eq
 8002fd4:	f043 0301 	orreq.w	r3, r3, #1
 8002fd8:	81a3      	strheq	r3, [r4, #12]
 8002fda:	89a2      	ldrh	r2, [r4, #12]
 8002fdc:	f012 0308 	ands.w	r3, r2, #8
 8002fe0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002fe4:	d01c      	beq.n	8003020 <setvbuf+0x16c>
 8002fe6:	07d3      	lsls	r3, r2, #31
 8002fe8:	bf41      	itttt	mi
 8002fea:	2300      	movmi	r3, #0
 8002fec:	426d      	negmi	r5, r5
 8002fee:	60a3      	strmi	r3, [r4, #8]
 8002ff0:	61a5      	strmi	r5, [r4, #24]
 8002ff2:	bf58      	it	pl
 8002ff4:	60a5      	strpl	r5, [r4, #8]
 8002ff6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002ff8:	f015 0501 	ands.w	r5, r5, #1
 8002ffc:	d115      	bne.n	800302a <setvbuf+0x176>
 8002ffe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003002:	e7c8      	b.n	8002f96 <setvbuf+0xe2>
 8003004:	4648      	mov	r0, r9
 8003006:	f000 fafb 	bl	8003600 <malloc>
 800300a:	4606      	mov	r6, r0
 800300c:	2800      	cmp	r0, #0
 800300e:	d0ae      	beq.n	8002f6e <setvbuf+0xba>
 8003010:	464d      	mov	r5, r9
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003018:	81a3      	strh	r3, [r4, #12]
 800301a:	e7d0      	b.n	8002fbe <setvbuf+0x10a>
 800301c:	2500      	movs	r5, #0
 800301e:	e7a8      	b.n	8002f72 <setvbuf+0xbe>
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	e7e8      	b.n	8002ff6 <setvbuf+0x142>
 8003024:	f04f 35ff 	mov.w	r5, #4294967295
 8003028:	e7b9      	b.n	8002f9e <setvbuf+0xea>
 800302a:	2500      	movs	r5, #0
 800302c:	e7b7      	b.n	8002f9e <setvbuf+0xea>
 800302e:	bf00      	nop
 8003030:	2000000c 	.word	0x2000000c
 8003034:	080039f4 	.word	0x080039f4
 8003038:	08003a14 	.word	0x08003a14
 800303c:	080039d4 	.word	0x080039d4

08003040 <__swbuf_r>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	460e      	mov	r6, r1
 8003044:	4614      	mov	r4, r2
 8003046:	4605      	mov	r5, r0
 8003048:	b118      	cbz	r0, 8003052 <__swbuf_r+0x12>
 800304a:	6983      	ldr	r3, [r0, #24]
 800304c:	b90b      	cbnz	r3, 8003052 <__swbuf_r+0x12>
 800304e:	f000 f9d1 	bl	80033f4 <__sinit>
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <__swbuf_r+0x98>)
 8003054:	429c      	cmp	r4, r3
 8003056:	d12b      	bne.n	80030b0 <__swbuf_r+0x70>
 8003058:	686c      	ldr	r4, [r5, #4]
 800305a:	69a3      	ldr	r3, [r4, #24]
 800305c:	60a3      	str	r3, [r4, #8]
 800305e:	89a3      	ldrh	r3, [r4, #12]
 8003060:	071a      	lsls	r2, r3, #28
 8003062:	d52f      	bpl.n	80030c4 <__swbuf_r+0x84>
 8003064:	6923      	ldr	r3, [r4, #16]
 8003066:	b36b      	cbz	r3, 80030c4 <__swbuf_r+0x84>
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	1ac0      	subs	r0, r0, r3
 800306e:	6963      	ldr	r3, [r4, #20]
 8003070:	b2f6      	uxtb	r6, r6
 8003072:	4283      	cmp	r3, r0
 8003074:	4637      	mov	r7, r6
 8003076:	dc04      	bgt.n	8003082 <__swbuf_r+0x42>
 8003078:	4621      	mov	r1, r4
 800307a:	4628      	mov	r0, r5
 800307c:	f000 f926 	bl	80032cc <_fflush_r>
 8003080:	bb30      	cbnz	r0, 80030d0 <__swbuf_r+0x90>
 8003082:	68a3      	ldr	r3, [r4, #8]
 8003084:	3b01      	subs	r3, #1
 8003086:	60a3      	str	r3, [r4, #8]
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	6022      	str	r2, [r4, #0]
 800308e:	701e      	strb	r6, [r3, #0]
 8003090:	6963      	ldr	r3, [r4, #20]
 8003092:	3001      	adds	r0, #1
 8003094:	4283      	cmp	r3, r0
 8003096:	d004      	beq.n	80030a2 <__swbuf_r+0x62>
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	07db      	lsls	r3, r3, #31
 800309c:	d506      	bpl.n	80030ac <__swbuf_r+0x6c>
 800309e:	2e0a      	cmp	r6, #10
 80030a0:	d104      	bne.n	80030ac <__swbuf_r+0x6c>
 80030a2:	4621      	mov	r1, r4
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f911 	bl	80032cc <_fflush_r>
 80030aa:	b988      	cbnz	r0, 80030d0 <__swbuf_r+0x90>
 80030ac:	4638      	mov	r0, r7
 80030ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <__swbuf_r+0x9c>)
 80030b2:	429c      	cmp	r4, r3
 80030b4:	d101      	bne.n	80030ba <__swbuf_r+0x7a>
 80030b6:	68ac      	ldr	r4, [r5, #8]
 80030b8:	e7cf      	b.n	800305a <__swbuf_r+0x1a>
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <__swbuf_r+0xa0>)
 80030bc:	429c      	cmp	r4, r3
 80030be:	bf08      	it	eq
 80030c0:	68ec      	ldreq	r4, [r5, #12]
 80030c2:	e7ca      	b.n	800305a <__swbuf_r+0x1a>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f80c 	bl	80030e4 <__swsetup_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d0cb      	beq.n	8003068 <__swbuf_r+0x28>
 80030d0:	f04f 37ff 	mov.w	r7, #4294967295
 80030d4:	e7ea      	b.n	80030ac <__swbuf_r+0x6c>
 80030d6:	bf00      	nop
 80030d8:	080039f4 	.word	0x080039f4
 80030dc:	08003a14 	.word	0x08003a14
 80030e0:	080039d4 	.word	0x080039d4

080030e4 <__swsetup_r>:
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <__swsetup_r+0xcc>)
 80030e6:	b570      	push	{r4, r5, r6, lr}
 80030e8:	681d      	ldr	r5, [r3, #0]
 80030ea:	4606      	mov	r6, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	b125      	cbz	r5, 80030fa <__swsetup_r+0x16>
 80030f0:	69ab      	ldr	r3, [r5, #24]
 80030f2:	b913      	cbnz	r3, 80030fa <__swsetup_r+0x16>
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 f97d 	bl	80033f4 <__sinit>
 80030fa:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <__swsetup_r+0xd0>)
 80030fc:	429c      	cmp	r4, r3
 80030fe:	d10f      	bne.n	8003120 <__swsetup_r+0x3c>
 8003100:	686c      	ldr	r4, [r5, #4]
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003108:	0719      	lsls	r1, r3, #28
 800310a:	d42c      	bmi.n	8003166 <__swsetup_r+0x82>
 800310c:	06dd      	lsls	r5, r3, #27
 800310e:	d411      	bmi.n	8003134 <__swsetup_r+0x50>
 8003110:	2309      	movs	r3, #9
 8003112:	6033      	str	r3, [r6, #0]
 8003114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	f04f 30ff 	mov.w	r0, #4294967295
 800311e:	e03e      	b.n	800319e <__swsetup_r+0xba>
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <__swsetup_r+0xd4>)
 8003122:	429c      	cmp	r4, r3
 8003124:	d101      	bne.n	800312a <__swsetup_r+0x46>
 8003126:	68ac      	ldr	r4, [r5, #8]
 8003128:	e7eb      	b.n	8003102 <__swsetup_r+0x1e>
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <__swsetup_r+0xd8>)
 800312c:	429c      	cmp	r4, r3
 800312e:	bf08      	it	eq
 8003130:	68ec      	ldreq	r4, [r5, #12]
 8003132:	e7e6      	b.n	8003102 <__swsetup_r+0x1e>
 8003134:	0758      	lsls	r0, r3, #29
 8003136:	d512      	bpl.n	800315e <__swsetup_r+0x7a>
 8003138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800313a:	b141      	cbz	r1, 800314e <__swsetup_r+0x6a>
 800313c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003140:	4299      	cmp	r1, r3
 8003142:	d002      	beq.n	800314a <__swsetup_r+0x66>
 8003144:	4630      	mov	r0, r6
 8003146:	f000 fa63 	bl	8003610 <_free_r>
 800314a:	2300      	movs	r3, #0
 800314c:	6363      	str	r3, [r4, #52]	; 0x34
 800314e:	89a3      	ldrh	r3, [r4, #12]
 8003150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	2300      	movs	r3, #0
 8003158:	6063      	str	r3, [r4, #4]
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	b94b      	cbnz	r3, 800317e <__swsetup_r+0x9a>
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003174:	d003      	beq.n	800317e <__swsetup_r+0x9a>
 8003176:	4621      	mov	r1, r4
 8003178:	4630      	mov	r0, r6
 800317a:	f000 fa01 	bl	8003580 <__smakebuf_r>
 800317e:	89a0      	ldrh	r0, [r4, #12]
 8003180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003184:	f010 0301 	ands.w	r3, r0, #1
 8003188:	d00a      	beq.n	80031a0 <__swsetup_r+0xbc>
 800318a:	2300      	movs	r3, #0
 800318c:	60a3      	str	r3, [r4, #8]
 800318e:	6963      	ldr	r3, [r4, #20]
 8003190:	425b      	negs	r3, r3
 8003192:	61a3      	str	r3, [r4, #24]
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	b943      	cbnz	r3, 80031aa <__swsetup_r+0xc6>
 8003198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800319c:	d1ba      	bne.n	8003114 <__swsetup_r+0x30>
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	0781      	lsls	r1, r0, #30
 80031a2:	bf58      	it	pl
 80031a4:	6963      	ldrpl	r3, [r4, #20]
 80031a6:	60a3      	str	r3, [r4, #8]
 80031a8:	e7f4      	b.n	8003194 <__swsetup_r+0xb0>
 80031aa:	2000      	movs	r0, #0
 80031ac:	e7f7      	b.n	800319e <__swsetup_r+0xba>
 80031ae:	bf00      	nop
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	080039f4 	.word	0x080039f4
 80031b8:	08003a14 	.word	0x08003a14
 80031bc:	080039d4 	.word	0x080039d4

080031c0 <__sflush_r>:
 80031c0:	898a      	ldrh	r2, [r1, #12]
 80031c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c6:	4605      	mov	r5, r0
 80031c8:	0710      	lsls	r0, r2, #28
 80031ca:	460c      	mov	r4, r1
 80031cc:	d458      	bmi.n	8003280 <__sflush_r+0xc0>
 80031ce:	684b      	ldr	r3, [r1, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dc05      	bgt.n	80031e0 <__sflush_r+0x20>
 80031d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dc02      	bgt.n	80031e0 <__sflush_r+0x20>
 80031da:	2000      	movs	r0, #0
 80031dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031e2:	2e00      	cmp	r6, #0
 80031e4:	d0f9      	beq.n	80031da <__sflush_r+0x1a>
 80031e6:	2300      	movs	r3, #0
 80031e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031ec:	682f      	ldr	r7, [r5, #0]
 80031ee:	602b      	str	r3, [r5, #0]
 80031f0:	d032      	beq.n	8003258 <__sflush_r+0x98>
 80031f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	075a      	lsls	r2, r3, #29
 80031f8:	d505      	bpl.n	8003206 <__sflush_r+0x46>
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	1ac0      	subs	r0, r0, r3
 80031fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003200:	b10b      	cbz	r3, 8003206 <__sflush_r+0x46>
 8003202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003204:	1ac0      	subs	r0, r0, r3
 8003206:	2300      	movs	r3, #0
 8003208:	4602      	mov	r2, r0
 800320a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	4628      	mov	r0, r5
 8003210:	47b0      	blx	r6
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	d106      	bne.n	8003226 <__sflush_r+0x66>
 8003218:	6829      	ldr	r1, [r5, #0]
 800321a:	291d      	cmp	r1, #29
 800321c:	d82c      	bhi.n	8003278 <__sflush_r+0xb8>
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <__sflush_r+0x108>)
 8003220:	40ca      	lsrs	r2, r1
 8003222:	07d6      	lsls	r6, r2, #31
 8003224:	d528      	bpl.n	8003278 <__sflush_r+0xb8>
 8003226:	2200      	movs	r2, #0
 8003228:	6062      	str	r2, [r4, #4]
 800322a:	04d9      	lsls	r1, r3, #19
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	6022      	str	r2, [r4, #0]
 8003230:	d504      	bpl.n	800323c <__sflush_r+0x7c>
 8003232:	1c42      	adds	r2, r0, #1
 8003234:	d101      	bne.n	800323a <__sflush_r+0x7a>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	b903      	cbnz	r3, 800323c <__sflush_r+0x7c>
 800323a:	6560      	str	r0, [r4, #84]	; 0x54
 800323c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800323e:	602f      	str	r7, [r5, #0]
 8003240:	2900      	cmp	r1, #0
 8003242:	d0ca      	beq.n	80031da <__sflush_r+0x1a>
 8003244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003248:	4299      	cmp	r1, r3
 800324a:	d002      	beq.n	8003252 <__sflush_r+0x92>
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f9df 	bl	8003610 <_free_r>
 8003252:	2000      	movs	r0, #0
 8003254:	6360      	str	r0, [r4, #52]	; 0x34
 8003256:	e7c1      	b.n	80031dc <__sflush_r+0x1c>
 8003258:	6a21      	ldr	r1, [r4, #32]
 800325a:	2301      	movs	r3, #1
 800325c:	4628      	mov	r0, r5
 800325e:	47b0      	blx	r6
 8003260:	1c41      	adds	r1, r0, #1
 8003262:	d1c7      	bne.n	80031f4 <__sflush_r+0x34>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0c4      	beq.n	80031f4 <__sflush_r+0x34>
 800326a:	2b1d      	cmp	r3, #29
 800326c:	d001      	beq.n	8003272 <__sflush_r+0xb2>
 800326e:	2b16      	cmp	r3, #22
 8003270:	d101      	bne.n	8003276 <__sflush_r+0xb6>
 8003272:	602f      	str	r7, [r5, #0]
 8003274:	e7b1      	b.n	80031da <__sflush_r+0x1a>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327c:	81a3      	strh	r3, [r4, #12]
 800327e:	e7ad      	b.n	80031dc <__sflush_r+0x1c>
 8003280:	690f      	ldr	r7, [r1, #16]
 8003282:	2f00      	cmp	r7, #0
 8003284:	d0a9      	beq.n	80031da <__sflush_r+0x1a>
 8003286:	0793      	lsls	r3, r2, #30
 8003288:	680e      	ldr	r6, [r1, #0]
 800328a:	bf08      	it	eq
 800328c:	694b      	ldreq	r3, [r1, #20]
 800328e:	600f      	str	r7, [r1, #0]
 8003290:	bf18      	it	ne
 8003292:	2300      	movne	r3, #0
 8003294:	eba6 0807 	sub.w	r8, r6, r7
 8003298:	608b      	str	r3, [r1, #8]
 800329a:	f1b8 0f00 	cmp.w	r8, #0
 800329e:	dd9c      	ble.n	80031da <__sflush_r+0x1a>
 80032a0:	6a21      	ldr	r1, [r4, #32]
 80032a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032a4:	4643      	mov	r3, r8
 80032a6:	463a      	mov	r2, r7
 80032a8:	4628      	mov	r0, r5
 80032aa:	47b0      	blx	r6
 80032ac:	2800      	cmp	r0, #0
 80032ae:	dc06      	bgt.n	80032be <__sflush_r+0xfe>
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e78e      	b.n	80031dc <__sflush_r+0x1c>
 80032be:	4407      	add	r7, r0
 80032c0:	eba8 0800 	sub.w	r8, r8, r0
 80032c4:	e7e9      	b.n	800329a <__sflush_r+0xda>
 80032c6:	bf00      	nop
 80032c8:	20400001 	.word	0x20400001

080032cc <_fflush_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	4605      	mov	r5, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	b913      	cbnz	r3, 80032dc <_fflush_r+0x10>
 80032d6:	2500      	movs	r5, #0
 80032d8:	4628      	mov	r0, r5
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	b118      	cbz	r0, 80032e6 <_fflush_r+0x1a>
 80032de:	6983      	ldr	r3, [r0, #24]
 80032e0:	b90b      	cbnz	r3, 80032e6 <_fflush_r+0x1a>
 80032e2:	f000 f887 	bl	80033f4 <__sinit>
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <_fflush_r+0x6c>)
 80032e8:	429c      	cmp	r4, r3
 80032ea:	d11b      	bne.n	8003324 <_fflush_r+0x58>
 80032ec:	686c      	ldr	r4, [r5, #4]
 80032ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ef      	beq.n	80032d6 <_fflush_r+0xa>
 80032f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032f8:	07d0      	lsls	r0, r2, #31
 80032fa:	d404      	bmi.n	8003306 <_fflush_r+0x3a>
 80032fc:	0599      	lsls	r1, r3, #22
 80032fe:	d402      	bmi.n	8003306 <_fflush_r+0x3a>
 8003300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003302:	f000 f915 	bl	8003530 <__retarget_lock_acquire_recursive>
 8003306:	4628      	mov	r0, r5
 8003308:	4621      	mov	r1, r4
 800330a:	f7ff ff59 	bl	80031c0 <__sflush_r>
 800330e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003310:	07da      	lsls	r2, r3, #31
 8003312:	4605      	mov	r5, r0
 8003314:	d4e0      	bmi.n	80032d8 <_fflush_r+0xc>
 8003316:	89a3      	ldrh	r3, [r4, #12]
 8003318:	059b      	lsls	r3, r3, #22
 800331a:	d4dd      	bmi.n	80032d8 <_fflush_r+0xc>
 800331c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800331e:	f000 f908 	bl	8003532 <__retarget_lock_release_recursive>
 8003322:	e7d9      	b.n	80032d8 <_fflush_r+0xc>
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <_fflush_r+0x70>)
 8003326:	429c      	cmp	r4, r3
 8003328:	d101      	bne.n	800332e <_fflush_r+0x62>
 800332a:	68ac      	ldr	r4, [r5, #8]
 800332c:	e7df      	b.n	80032ee <_fflush_r+0x22>
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <_fflush_r+0x74>)
 8003330:	429c      	cmp	r4, r3
 8003332:	bf08      	it	eq
 8003334:	68ec      	ldreq	r4, [r5, #12]
 8003336:	e7da      	b.n	80032ee <_fflush_r+0x22>
 8003338:	080039f4 	.word	0x080039f4
 800333c:	08003a14 	.word	0x08003a14
 8003340:	080039d4 	.word	0x080039d4

08003344 <std>:
 8003344:	2300      	movs	r3, #0
 8003346:	b510      	push	{r4, lr}
 8003348:	4604      	mov	r4, r0
 800334a:	e9c0 3300 	strd	r3, r3, [r0]
 800334e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003352:	6083      	str	r3, [r0, #8]
 8003354:	8181      	strh	r1, [r0, #12]
 8003356:	6643      	str	r3, [r0, #100]	; 0x64
 8003358:	81c2      	strh	r2, [r0, #14]
 800335a:	6183      	str	r3, [r0, #24]
 800335c:	4619      	mov	r1, r3
 800335e:	2208      	movs	r2, #8
 8003360:	305c      	adds	r0, #92	; 0x5c
 8003362:	f7ff fd21 	bl	8002da8 <memset>
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <std+0x38>)
 8003368:	6263      	str	r3, [r4, #36]	; 0x24
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <std+0x3c>)
 800336c:	62a3      	str	r3, [r4, #40]	; 0x28
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <std+0x40>)
 8003370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <std+0x44>)
 8003374:	6224      	str	r4, [r4, #32]
 8003376:	6323      	str	r3, [r4, #48]	; 0x30
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	080037f1 	.word	0x080037f1
 8003380:	08003813 	.word	0x08003813
 8003384:	0800384b 	.word	0x0800384b
 8003388:	0800386f 	.word	0x0800386f

0800338c <_cleanup_r>:
 800338c:	4901      	ldr	r1, [pc, #4]	; (8003394 <_cleanup_r+0x8>)
 800338e:	f000 b8af 	b.w	80034f0 <_fwalk_reent>
 8003392:	bf00      	nop
 8003394:	080032cd 	.word	0x080032cd

08003398 <__sfmoreglue>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	2268      	movs	r2, #104	; 0x68
 800339c:	1e4d      	subs	r5, r1, #1
 800339e:	4355      	muls	r5, r2
 80033a0:	460e      	mov	r6, r1
 80033a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033a6:	f000 f99f 	bl	80036e8 <_malloc_r>
 80033aa:	4604      	mov	r4, r0
 80033ac:	b140      	cbz	r0, 80033c0 <__sfmoreglue+0x28>
 80033ae:	2100      	movs	r1, #0
 80033b0:	e9c0 1600 	strd	r1, r6, [r0]
 80033b4:	300c      	adds	r0, #12
 80033b6:	60a0      	str	r0, [r4, #8]
 80033b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033bc:	f7ff fcf4 	bl	8002da8 <memset>
 80033c0:	4620      	mov	r0, r4
 80033c2:	bd70      	pop	{r4, r5, r6, pc}

080033c4 <__sfp_lock_acquire>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__sfp_lock_acquire+0x8>)
 80033c6:	f000 b8b3 	b.w	8003530 <__retarget_lock_acquire_recursive>
 80033ca:	bf00      	nop
 80033cc:	20000119 	.word	0x20000119

080033d0 <__sfp_lock_release>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__sfp_lock_release+0x8>)
 80033d2:	f000 b8ae 	b.w	8003532 <__retarget_lock_release_recursive>
 80033d6:	bf00      	nop
 80033d8:	20000119 	.word	0x20000119

080033dc <__sinit_lock_acquire>:
 80033dc:	4801      	ldr	r0, [pc, #4]	; (80033e4 <__sinit_lock_acquire+0x8>)
 80033de:	f000 b8a7 	b.w	8003530 <__retarget_lock_acquire_recursive>
 80033e2:	bf00      	nop
 80033e4:	2000011a 	.word	0x2000011a

080033e8 <__sinit_lock_release>:
 80033e8:	4801      	ldr	r0, [pc, #4]	; (80033f0 <__sinit_lock_release+0x8>)
 80033ea:	f000 b8a2 	b.w	8003532 <__retarget_lock_release_recursive>
 80033ee:	bf00      	nop
 80033f0:	2000011a 	.word	0x2000011a

080033f4 <__sinit>:
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
 80033f8:	f7ff fff0 	bl	80033dc <__sinit_lock_acquire>
 80033fc:	69a3      	ldr	r3, [r4, #24]
 80033fe:	b11b      	cbz	r3, 8003408 <__sinit+0x14>
 8003400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003404:	f7ff bff0 	b.w	80033e8 <__sinit_lock_release>
 8003408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800340c:	6523      	str	r3, [r4, #80]	; 0x50
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <__sinit+0x68>)
 8003410:	4a13      	ldr	r2, [pc, #76]	; (8003460 <__sinit+0x6c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	62a2      	str	r2, [r4, #40]	; 0x28
 8003416:	42a3      	cmp	r3, r4
 8003418:	bf04      	itt	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	61a3      	streq	r3, [r4, #24]
 800341e:	4620      	mov	r0, r4
 8003420:	f000 f820 	bl	8003464 <__sfp>
 8003424:	6060      	str	r0, [r4, #4]
 8003426:	4620      	mov	r0, r4
 8003428:	f000 f81c 	bl	8003464 <__sfp>
 800342c:	60a0      	str	r0, [r4, #8]
 800342e:	4620      	mov	r0, r4
 8003430:	f000 f818 	bl	8003464 <__sfp>
 8003434:	2200      	movs	r2, #0
 8003436:	60e0      	str	r0, [r4, #12]
 8003438:	2104      	movs	r1, #4
 800343a:	6860      	ldr	r0, [r4, #4]
 800343c:	f7ff ff82 	bl	8003344 <std>
 8003440:	68a0      	ldr	r0, [r4, #8]
 8003442:	2201      	movs	r2, #1
 8003444:	2109      	movs	r1, #9
 8003446:	f7ff ff7d 	bl	8003344 <std>
 800344a:	68e0      	ldr	r0, [r4, #12]
 800344c:	2202      	movs	r2, #2
 800344e:	2112      	movs	r1, #18
 8003450:	f7ff ff78 	bl	8003344 <std>
 8003454:	2301      	movs	r3, #1
 8003456:	61a3      	str	r3, [r4, #24]
 8003458:	e7d2      	b.n	8003400 <__sinit+0xc>
 800345a:	bf00      	nop
 800345c:	080039d0 	.word	0x080039d0
 8003460:	0800338d 	.word	0x0800338d

08003464 <__sfp>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	4607      	mov	r7, r0
 8003468:	f7ff ffac 	bl	80033c4 <__sfp_lock_acquire>
 800346c:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <__sfp+0x84>)
 800346e:	681e      	ldr	r6, [r3, #0]
 8003470:	69b3      	ldr	r3, [r6, #24]
 8003472:	b913      	cbnz	r3, 800347a <__sfp+0x16>
 8003474:	4630      	mov	r0, r6
 8003476:	f7ff ffbd 	bl	80033f4 <__sinit>
 800347a:	3648      	adds	r6, #72	; 0x48
 800347c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003480:	3b01      	subs	r3, #1
 8003482:	d503      	bpl.n	800348c <__sfp+0x28>
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	b30b      	cbz	r3, 80034cc <__sfp+0x68>
 8003488:	6836      	ldr	r6, [r6, #0]
 800348a:	e7f7      	b.n	800347c <__sfp+0x18>
 800348c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003490:	b9d5      	cbnz	r5, 80034c8 <__sfp+0x64>
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <__sfp+0x88>)
 8003494:	60e3      	str	r3, [r4, #12]
 8003496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800349a:	6665      	str	r5, [r4, #100]	; 0x64
 800349c:	f000 f847 	bl	800352e <__retarget_lock_init_recursive>
 80034a0:	f7ff ff96 	bl	80033d0 <__sfp_lock_release>
 80034a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034ac:	6025      	str	r5, [r4, #0]
 80034ae:	61a5      	str	r5, [r4, #24]
 80034b0:	2208      	movs	r2, #8
 80034b2:	4629      	mov	r1, r5
 80034b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034b8:	f7ff fc76 	bl	8002da8 <memset>
 80034bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034c4:	4620      	mov	r0, r4
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c8:	3468      	adds	r4, #104	; 0x68
 80034ca:	e7d9      	b.n	8003480 <__sfp+0x1c>
 80034cc:	2104      	movs	r1, #4
 80034ce:	4638      	mov	r0, r7
 80034d0:	f7ff ff62 	bl	8003398 <__sfmoreglue>
 80034d4:	4604      	mov	r4, r0
 80034d6:	6030      	str	r0, [r6, #0]
 80034d8:	2800      	cmp	r0, #0
 80034da:	d1d5      	bne.n	8003488 <__sfp+0x24>
 80034dc:	f7ff ff78 	bl	80033d0 <__sfp_lock_release>
 80034e0:	230c      	movs	r3, #12
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	e7ee      	b.n	80034c4 <__sfp+0x60>
 80034e6:	bf00      	nop
 80034e8:	080039d0 	.word	0x080039d0
 80034ec:	ffff0001 	.word	0xffff0001

080034f0 <_fwalk_reent>:
 80034f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f4:	4606      	mov	r6, r0
 80034f6:	4688      	mov	r8, r1
 80034f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034fc:	2700      	movs	r7, #0
 80034fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003502:	f1b9 0901 	subs.w	r9, r9, #1
 8003506:	d505      	bpl.n	8003514 <_fwalk_reent+0x24>
 8003508:	6824      	ldr	r4, [r4, #0]
 800350a:	2c00      	cmp	r4, #0
 800350c:	d1f7      	bne.n	80034fe <_fwalk_reent+0xe>
 800350e:	4638      	mov	r0, r7
 8003510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003514:	89ab      	ldrh	r3, [r5, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d907      	bls.n	800352a <_fwalk_reent+0x3a>
 800351a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800351e:	3301      	adds	r3, #1
 8003520:	d003      	beq.n	800352a <_fwalk_reent+0x3a>
 8003522:	4629      	mov	r1, r5
 8003524:	4630      	mov	r0, r6
 8003526:	47c0      	blx	r8
 8003528:	4307      	orrs	r7, r0
 800352a:	3568      	adds	r5, #104	; 0x68
 800352c:	e7e9      	b.n	8003502 <_fwalk_reent+0x12>

0800352e <__retarget_lock_init_recursive>:
 800352e:	4770      	bx	lr

08003530 <__retarget_lock_acquire_recursive>:
 8003530:	4770      	bx	lr

08003532 <__retarget_lock_release_recursive>:
 8003532:	4770      	bx	lr

08003534 <__swhatbuf_r>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	460e      	mov	r6, r1
 8003538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353c:	2900      	cmp	r1, #0
 800353e:	b096      	sub	sp, #88	; 0x58
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	da08      	bge.n	8003558 <__swhatbuf_r+0x24>
 8003546:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	602a      	str	r2, [r5, #0]
 800354e:	061a      	lsls	r2, r3, #24
 8003550:	d410      	bmi.n	8003574 <__swhatbuf_r+0x40>
 8003552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003556:	e00e      	b.n	8003576 <__swhatbuf_r+0x42>
 8003558:	466a      	mov	r2, sp
 800355a:	f000 f9af 	bl	80038bc <_fstat_r>
 800355e:	2800      	cmp	r0, #0
 8003560:	dbf1      	blt.n	8003546 <__swhatbuf_r+0x12>
 8003562:	9a01      	ldr	r2, [sp, #4]
 8003564:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003568:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800356c:	425a      	negs	r2, r3
 800356e:	415a      	adcs	r2, r3
 8003570:	602a      	str	r2, [r5, #0]
 8003572:	e7ee      	b.n	8003552 <__swhatbuf_r+0x1e>
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	2000      	movs	r0, #0
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	b016      	add	sp, #88	; 0x58
 800357c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003580 <__smakebuf_r>:
 8003580:	898b      	ldrh	r3, [r1, #12]
 8003582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003584:	079d      	lsls	r5, r3, #30
 8003586:	4606      	mov	r6, r0
 8003588:	460c      	mov	r4, r1
 800358a:	d507      	bpl.n	800359c <__smakebuf_r+0x1c>
 800358c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	6123      	str	r3, [r4, #16]
 8003594:	2301      	movs	r3, #1
 8003596:	6163      	str	r3, [r4, #20]
 8003598:	b002      	add	sp, #8
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	ab01      	add	r3, sp, #4
 800359e:	466a      	mov	r2, sp
 80035a0:	f7ff ffc8 	bl	8003534 <__swhatbuf_r>
 80035a4:	9900      	ldr	r1, [sp, #0]
 80035a6:	4605      	mov	r5, r0
 80035a8:	4630      	mov	r0, r6
 80035aa:	f000 f89d 	bl	80036e8 <_malloc_r>
 80035ae:	b948      	cbnz	r0, 80035c4 <__smakebuf_r+0x44>
 80035b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b4:	059a      	lsls	r2, r3, #22
 80035b6:	d4ef      	bmi.n	8003598 <__smakebuf_r+0x18>
 80035b8:	f023 0303 	bic.w	r3, r3, #3
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	e7e3      	b.n	800358c <__smakebuf_r+0xc>
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <__smakebuf_r+0x7c>)
 80035c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	6020      	str	r0, [r4, #0]
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	81a3      	strh	r3, [r4, #12]
 80035d2:	9b00      	ldr	r3, [sp, #0]
 80035d4:	6163      	str	r3, [r4, #20]
 80035d6:	9b01      	ldr	r3, [sp, #4]
 80035d8:	6120      	str	r0, [r4, #16]
 80035da:	b15b      	cbz	r3, 80035f4 <__smakebuf_r+0x74>
 80035dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035e0:	4630      	mov	r0, r6
 80035e2:	f000 f97d 	bl	80038e0 <_isatty_r>
 80035e6:	b128      	cbz	r0, 80035f4 <__smakebuf_r+0x74>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	89a0      	ldrh	r0, [r4, #12]
 80035f6:	4305      	orrs	r5, r0
 80035f8:	81a5      	strh	r5, [r4, #12]
 80035fa:	e7cd      	b.n	8003598 <__smakebuf_r+0x18>
 80035fc:	0800338d 	.word	0x0800338d

08003600 <malloc>:
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <malloc+0xc>)
 8003602:	4601      	mov	r1, r0
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f000 b86f 	b.w	80036e8 <_malloc_r>
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c

08003610 <_free_r>:
 8003610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003612:	2900      	cmp	r1, #0
 8003614:	d044      	beq.n	80036a0 <_free_r+0x90>
 8003616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800361a:	9001      	str	r0, [sp, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f1a1 0404 	sub.w	r4, r1, #4
 8003622:	bfb8      	it	lt
 8003624:	18e4      	addlt	r4, r4, r3
 8003626:	f000 f97d 	bl	8003924 <__malloc_lock>
 800362a:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <_free_r+0x94>)
 800362c:	9801      	ldr	r0, [sp, #4]
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	b933      	cbnz	r3, 8003640 <_free_r+0x30>
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	6014      	str	r4, [r2, #0]
 8003636:	b003      	add	sp, #12
 8003638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800363c:	f000 b978 	b.w	8003930 <__malloc_unlock>
 8003640:	42a3      	cmp	r3, r4
 8003642:	d908      	bls.n	8003656 <_free_r+0x46>
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	1961      	adds	r1, r4, r5
 8003648:	428b      	cmp	r3, r1
 800364a:	bf01      	itttt	eq
 800364c:	6819      	ldreq	r1, [r3, #0]
 800364e:	685b      	ldreq	r3, [r3, #4]
 8003650:	1949      	addeq	r1, r1, r5
 8003652:	6021      	streq	r1, [r4, #0]
 8003654:	e7ed      	b.n	8003632 <_free_r+0x22>
 8003656:	461a      	mov	r2, r3
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b10b      	cbz	r3, 8003660 <_free_r+0x50>
 800365c:	42a3      	cmp	r3, r4
 800365e:	d9fa      	bls.n	8003656 <_free_r+0x46>
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	1855      	adds	r5, r2, r1
 8003664:	42a5      	cmp	r5, r4
 8003666:	d10b      	bne.n	8003680 <_free_r+0x70>
 8003668:	6824      	ldr	r4, [r4, #0]
 800366a:	4421      	add	r1, r4
 800366c:	1854      	adds	r4, r2, r1
 800366e:	42a3      	cmp	r3, r4
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	d1e0      	bne.n	8003636 <_free_r+0x26>
 8003674:	681c      	ldr	r4, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	6053      	str	r3, [r2, #4]
 800367a:	4421      	add	r1, r4
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	e7da      	b.n	8003636 <_free_r+0x26>
 8003680:	d902      	bls.n	8003688 <_free_r+0x78>
 8003682:	230c      	movs	r3, #12
 8003684:	6003      	str	r3, [r0, #0]
 8003686:	e7d6      	b.n	8003636 <_free_r+0x26>
 8003688:	6825      	ldr	r5, [r4, #0]
 800368a:	1961      	adds	r1, r4, r5
 800368c:	428b      	cmp	r3, r1
 800368e:	bf04      	itt	eq
 8003690:	6819      	ldreq	r1, [r3, #0]
 8003692:	685b      	ldreq	r3, [r3, #4]
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	bf04      	itt	eq
 8003698:	1949      	addeq	r1, r1, r5
 800369a:	6021      	streq	r1, [r4, #0]
 800369c:	6054      	str	r4, [r2, #4]
 800369e:	e7ca      	b.n	8003636 <_free_r+0x26>
 80036a0:	b003      	add	sp, #12
 80036a2:	bd30      	pop	{r4, r5, pc}
 80036a4:	2000011c 	.word	0x2000011c

080036a8 <sbrk_aligned>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4e0e      	ldr	r6, [pc, #56]	; (80036e4 <sbrk_aligned+0x3c>)
 80036ac:	460c      	mov	r4, r1
 80036ae:	6831      	ldr	r1, [r6, #0]
 80036b0:	4605      	mov	r5, r0
 80036b2:	b911      	cbnz	r1, 80036ba <sbrk_aligned+0x12>
 80036b4:	f000 f88c 	bl	80037d0 <_sbrk_r>
 80036b8:	6030      	str	r0, [r6, #0]
 80036ba:	4621      	mov	r1, r4
 80036bc:	4628      	mov	r0, r5
 80036be:	f000 f887 	bl	80037d0 <_sbrk_r>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	d00a      	beq.n	80036dc <sbrk_aligned+0x34>
 80036c6:	1cc4      	adds	r4, r0, #3
 80036c8:	f024 0403 	bic.w	r4, r4, #3
 80036cc:	42a0      	cmp	r0, r4
 80036ce:	d007      	beq.n	80036e0 <sbrk_aligned+0x38>
 80036d0:	1a21      	subs	r1, r4, r0
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f87c 	bl	80037d0 <_sbrk_r>
 80036d8:	3001      	adds	r0, #1
 80036da:	d101      	bne.n	80036e0 <sbrk_aligned+0x38>
 80036dc:	f04f 34ff 	mov.w	r4, #4294967295
 80036e0:	4620      	mov	r0, r4
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	20000120 	.word	0x20000120

080036e8 <_malloc_r>:
 80036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	1ccd      	adds	r5, r1, #3
 80036ee:	f025 0503 	bic.w	r5, r5, #3
 80036f2:	3508      	adds	r5, #8
 80036f4:	2d0c      	cmp	r5, #12
 80036f6:	bf38      	it	cc
 80036f8:	250c      	movcc	r5, #12
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	4607      	mov	r7, r0
 80036fe:	db01      	blt.n	8003704 <_malloc_r+0x1c>
 8003700:	42a9      	cmp	r1, r5
 8003702:	d905      	bls.n	8003710 <_malloc_r+0x28>
 8003704:	230c      	movs	r3, #12
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	2600      	movs	r6, #0
 800370a:	4630      	mov	r0, r6
 800370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003710:	4e2e      	ldr	r6, [pc, #184]	; (80037cc <_malloc_r+0xe4>)
 8003712:	f000 f907 	bl	8003924 <__malloc_lock>
 8003716:	6833      	ldr	r3, [r6, #0]
 8003718:	461c      	mov	r4, r3
 800371a:	bb34      	cbnz	r4, 800376a <_malloc_r+0x82>
 800371c:	4629      	mov	r1, r5
 800371e:	4638      	mov	r0, r7
 8003720:	f7ff ffc2 	bl	80036a8 <sbrk_aligned>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	4604      	mov	r4, r0
 8003728:	d14d      	bne.n	80037c6 <_malloc_r+0xde>
 800372a:	6834      	ldr	r4, [r6, #0]
 800372c:	4626      	mov	r6, r4
 800372e:	2e00      	cmp	r6, #0
 8003730:	d140      	bne.n	80037b4 <_malloc_r+0xcc>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	4631      	mov	r1, r6
 8003736:	4638      	mov	r0, r7
 8003738:	eb04 0803 	add.w	r8, r4, r3
 800373c:	f000 f848 	bl	80037d0 <_sbrk_r>
 8003740:	4580      	cmp	r8, r0
 8003742:	d13a      	bne.n	80037ba <_malloc_r+0xd2>
 8003744:	6821      	ldr	r1, [r4, #0]
 8003746:	3503      	adds	r5, #3
 8003748:	1a6d      	subs	r5, r5, r1
 800374a:	f025 0503 	bic.w	r5, r5, #3
 800374e:	3508      	adds	r5, #8
 8003750:	2d0c      	cmp	r5, #12
 8003752:	bf38      	it	cc
 8003754:	250c      	movcc	r5, #12
 8003756:	4629      	mov	r1, r5
 8003758:	4638      	mov	r0, r7
 800375a:	f7ff ffa5 	bl	80036a8 <sbrk_aligned>
 800375e:	3001      	adds	r0, #1
 8003760:	d02b      	beq.n	80037ba <_malloc_r+0xd2>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	442b      	add	r3, r5
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	e00e      	b.n	8003788 <_malloc_r+0xa0>
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	1b52      	subs	r2, r2, r5
 800376e:	d41e      	bmi.n	80037ae <_malloc_r+0xc6>
 8003770:	2a0b      	cmp	r2, #11
 8003772:	d916      	bls.n	80037a2 <_malloc_r+0xba>
 8003774:	1961      	adds	r1, r4, r5
 8003776:	42a3      	cmp	r3, r4
 8003778:	6025      	str	r5, [r4, #0]
 800377a:	bf18      	it	ne
 800377c:	6059      	strne	r1, [r3, #4]
 800377e:	6863      	ldr	r3, [r4, #4]
 8003780:	bf08      	it	eq
 8003782:	6031      	streq	r1, [r6, #0]
 8003784:	5162      	str	r2, [r4, r5]
 8003786:	604b      	str	r3, [r1, #4]
 8003788:	4638      	mov	r0, r7
 800378a:	f104 060b 	add.w	r6, r4, #11
 800378e:	f000 f8cf 	bl	8003930 <__malloc_unlock>
 8003792:	f026 0607 	bic.w	r6, r6, #7
 8003796:	1d23      	adds	r3, r4, #4
 8003798:	1af2      	subs	r2, r6, r3
 800379a:	d0b6      	beq.n	800370a <_malloc_r+0x22>
 800379c:	1b9b      	subs	r3, r3, r6
 800379e:	50a3      	str	r3, [r4, r2]
 80037a0:	e7b3      	b.n	800370a <_malloc_r+0x22>
 80037a2:	6862      	ldr	r2, [r4, #4]
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	bf0c      	ite	eq
 80037a8:	6032      	streq	r2, [r6, #0]
 80037aa:	605a      	strne	r2, [r3, #4]
 80037ac:	e7ec      	b.n	8003788 <_malloc_r+0xa0>
 80037ae:	4623      	mov	r3, r4
 80037b0:	6864      	ldr	r4, [r4, #4]
 80037b2:	e7b2      	b.n	800371a <_malloc_r+0x32>
 80037b4:	4634      	mov	r4, r6
 80037b6:	6876      	ldr	r6, [r6, #4]
 80037b8:	e7b9      	b.n	800372e <_malloc_r+0x46>
 80037ba:	230c      	movs	r3, #12
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4638      	mov	r0, r7
 80037c0:	f000 f8b6 	bl	8003930 <__malloc_unlock>
 80037c4:	e7a1      	b.n	800370a <_malloc_r+0x22>
 80037c6:	6025      	str	r5, [r4, #0]
 80037c8:	e7de      	b.n	8003788 <_malloc_r+0xa0>
 80037ca:	bf00      	nop
 80037cc:	2000011c 	.word	0x2000011c

080037d0 <_sbrk_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4d06      	ldr	r5, [pc, #24]	; (80037ec <_sbrk_r+0x1c>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	f7fd f83e 	bl	800085c <_sbrk>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_sbrk_r+0x1a>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_sbrk_r+0x1a>
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000124 	.word	0x20000124

080037f0 <__sread>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	460c      	mov	r4, r1
 80037f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f8:	f000 f8a0 	bl	800393c <_read_r>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	bfab      	itete	ge
 8003800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003802:	89a3      	ldrhlt	r3, [r4, #12]
 8003804:	181b      	addge	r3, r3, r0
 8003806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800380a:	bfac      	ite	ge
 800380c:	6563      	strge	r3, [r4, #84]	; 0x54
 800380e:	81a3      	strhlt	r3, [r4, #12]
 8003810:	bd10      	pop	{r4, pc}

08003812 <__swrite>:
 8003812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003816:	461f      	mov	r7, r3
 8003818:	898b      	ldrh	r3, [r1, #12]
 800381a:	05db      	lsls	r3, r3, #23
 800381c:	4605      	mov	r5, r0
 800381e:	460c      	mov	r4, r1
 8003820:	4616      	mov	r6, r2
 8003822:	d505      	bpl.n	8003830 <__swrite+0x1e>
 8003824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003828:	2302      	movs	r3, #2
 800382a:	2200      	movs	r2, #0
 800382c:	f000 f868 	bl	8003900 <_lseek_r>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800383a:	81a3      	strh	r3, [r4, #12]
 800383c:	4632      	mov	r2, r6
 800383e:	463b      	mov	r3, r7
 8003840:	4628      	mov	r0, r5
 8003842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003846:	f000 b817 	b.w	8003878 <_write_r>

0800384a <__sseek>:
 800384a:	b510      	push	{r4, lr}
 800384c:	460c      	mov	r4, r1
 800384e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003852:	f000 f855 	bl	8003900 <_lseek_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	bf15      	itete	ne
 800385c:	6560      	strne	r0, [r4, #84]	; 0x54
 800385e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003866:	81a3      	strheq	r3, [r4, #12]
 8003868:	bf18      	it	ne
 800386a:	81a3      	strhne	r3, [r4, #12]
 800386c:	bd10      	pop	{r4, pc}

0800386e <__sclose>:
 800386e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003872:	f000 b813 	b.w	800389c <_close_r>
	...

08003878 <_write_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d07      	ldr	r5, [pc, #28]	; (8003898 <_write_r+0x20>)
 800387c:	4604      	mov	r4, r0
 800387e:	4608      	mov	r0, r1
 8003880:	4611      	mov	r1, r2
 8003882:	2200      	movs	r2, #0
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fc fed2 	bl	8000630 <_write>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_write_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_write_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20000124 	.word	0x20000124

0800389c <_close_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4d06      	ldr	r5, [pc, #24]	; (80038b8 <_close_r+0x1c>)
 80038a0:	2300      	movs	r3, #0
 80038a2:	4604      	mov	r4, r0
 80038a4:	4608      	mov	r0, r1
 80038a6:	602b      	str	r3, [r5, #0]
 80038a8:	f7fc ffa3 	bl	80007f2 <_close>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_close_r+0x1a>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_close_r+0x1a>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000124 	.word	0x20000124

080038bc <_fstat_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4d07      	ldr	r5, [pc, #28]	; (80038dc <_fstat_r+0x20>)
 80038c0:	2300      	movs	r3, #0
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	f7fc ff9e 	bl	800080a <_fstat>
 80038ce:	1c43      	adds	r3, r0, #1
 80038d0:	d102      	bne.n	80038d8 <_fstat_r+0x1c>
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	b103      	cbz	r3, 80038d8 <_fstat_r+0x1c>
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
 80038da:	bf00      	nop
 80038dc:	20000124 	.word	0x20000124

080038e0 <_isatty_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d06      	ldr	r5, [pc, #24]	; (80038fc <_isatty_r+0x1c>)
 80038e4:	2300      	movs	r3, #0
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	f7fc ff9d 	bl	800082a <_isatty>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_isatty_r+0x1a>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_isatty_r+0x1a>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	20000124 	.word	0x20000124

08003900 <_lseek_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4d07      	ldr	r5, [pc, #28]	; (8003920 <_lseek_r+0x20>)
 8003904:	4604      	mov	r4, r0
 8003906:	4608      	mov	r0, r1
 8003908:	4611      	mov	r1, r2
 800390a:	2200      	movs	r2, #0
 800390c:	602a      	str	r2, [r5, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	f7fc ff96 	bl	8000840 <_lseek>
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	d102      	bne.n	800391e <_lseek_r+0x1e>
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	b103      	cbz	r3, 800391e <_lseek_r+0x1e>
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	bd38      	pop	{r3, r4, r5, pc}
 8003920:	20000124 	.word	0x20000124

08003924 <__malloc_lock>:
 8003924:	4801      	ldr	r0, [pc, #4]	; (800392c <__malloc_lock+0x8>)
 8003926:	f7ff be03 	b.w	8003530 <__retarget_lock_acquire_recursive>
 800392a:	bf00      	nop
 800392c:	20000118 	.word	0x20000118

08003930 <__malloc_unlock>:
 8003930:	4801      	ldr	r0, [pc, #4]	; (8003938 <__malloc_unlock+0x8>)
 8003932:	f7ff bdfe 	b.w	8003532 <__retarget_lock_release_recursive>
 8003936:	bf00      	nop
 8003938:	20000118 	.word	0x20000118

0800393c <_read_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4d07      	ldr	r5, [pc, #28]	; (800395c <_read_r+0x20>)
 8003940:	4604      	mov	r4, r0
 8003942:	4608      	mov	r0, r1
 8003944:	4611      	mov	r1, r2
 8003946:	2200      	movs	r2, #0
 8003948:	602a      	str	r2, [r5, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f7fc ff34 	bl	80007b8 <_read>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_read_r+0x1e>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_read_r+0x1e>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	20000124 	.word	0x20000124

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
